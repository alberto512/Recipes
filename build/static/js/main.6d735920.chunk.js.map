{"version":3,"sources":["components/NavBar/NavBar.jsx","components/NavBar/NavBarGroup.jsx","pages/Home.jsx","components/SearchBar/SearchBar.jsx","components/RecipeCard/RecipeCard.jsx","pages/Recipes.jsx","components/Form/Form.jsx","pages/Create.jsx","components/InfoComponent/InfoComponent.jsx","pages/Info.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","React","forwardRef","props","ref","useState","display","setDisplay","useImperativeHandle","openNavBar","open","closeNavBar","close","ReactDOM","createPortal","className","onClick","children","document","getElementById","NavBarGroup","navBarRef","useRef","Fragment","size","current","icon","exact","activeClassName","to","Home","SearchBar","handleClick","e","preventDefault","checkValidity","value","autoComplete","id","type","placeholder","required","this","Component","Empty","counter","RecipeCard","state","myArray","axios","get","then","response","auxArray","i","j","aux","data","push","arrayaux2","setState","title","includes","prevProps","getDataCustom","$","hover","animate","marginTop","marginBottom","getData","cont","map","index","CardDeck","key","auxstr","steps","substr","auxstr2","replace","Card","Img","variant","src","image","Body","Title","Text","Button","c","CheckCards","Recipes","handleValue","val","FormComponent","bsCustomFileInput","init","file","formData","FormData","schema","Yup","category","oneOf","Header","validationSchema","onSubmit","item","append","post","Swal","fire","text","onClose","window","location","reload","catch","error","initialValues","handleSubmit","handleChange","values","errors","Form","noValidate","Row","Group","as","Col","controlId","Label","Control","name","onChange","isInvalid","Feedback","rows","File","event","target","files","customChange","label","accept","custom","Create","InfoComponent","recipe","steps_splitted","params","splitted","split","Info","match","App","path","component","Boolean","hostname","render","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6d735920.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst NavBar = React.forwardRef((props, ref) => {\r\n  const [display, setDisplay] = React.useState(false);\r\n\r\n  React.useImperativeHandle(ref, () => {\r\n    return {\r\n      openNavBar: () => open(),\r\n      closeNavBar: () => close(),\r\n    };\r\n  });\r\n\r\n  const open = () => {\r\n    setDisplay(true);\r\n  };\r\n\r\n  const close = () => {\r\n    setDisplay(false);\r\n  };\r\n\r\n  if (display) {\r\n    return ReactDOM.createPortal(\r\n      <div className={\"modal-wrapper\"}>\r\n        <div onClick={close} className={\"modal-backdrop\"} />\r\n        <div className={\"modal-box\"}>{props.children}</div>\r\n      </div>,\r\n      document.getElementById(\"root\")\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { MDBIcon } from \"mdbreact\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBarGroup() {\r\n  const navBarRef = React.useRef();\r\n\r\n  const openNavBar = () => {\r\n    navBarRef.current.openNavBar();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MDBIcon size=\"2x\" className=\"icon\" onClick={openNavBar} icon=\"bars\" />\r\n\r\n      <NavBar ref={navBarRef}>\r\n        <div className=\"div-nav-bar\">\r\n          <div className=\"div-nav-elements\">\r\n            <ul>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/RecipesWeb/\">\r\n                  Home\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/recipes\">\r\n                  Recipes\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink exact activeClassName=\"current\" to=\"/create\">\r\n                  Create\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </NavBar>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NavBarGroup;\r\n","import React from \"react\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport \"./Home.css\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <div className=\"home\">\r\n        <div className=\"title\">\r\n          <h1 className=\"recipes\">Recipes</h1>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    if (document.getElementById(\"input-bar\").checkValidity()) {\r\n      this.props.value(document.getElementById(\"input-bar\").value);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <form autoComplete=\"off\">\r\n            <div className=\"tb\">\r\n              <div className=\"td\">\r\n                <input\r\n                  id=\"input-bar\"\r\n                  className=\"input-bar\"\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"td\" id=\"cover\">\r\n                <button\r\n                  className=\"button-bar\"\r\n                  type=\"submit\"\r\n                  onClick={this.handleClick}\r\n                >\r\n                  <div className=\"circle\"></div>\r\n                  <span className=\"button-span\"></span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { CardDeck } from \"react-bootstrap\";\r\nimport $ from \"jquery\";\r\nimport axios from \"axios\";\r\nimport \"./RecipeCard.css\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Empty(props) {\r\n  const cont = props.counter;\r\n  if (cont === 0) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>No matching recipes</h1>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <p></p>;\r\n  }\r\n}\r\n\r\nfunction CheckCards(cont) {\r\n  let c = cont % 3;\r\n  if (c === 1) {\r\n    return (\r\n      <React.Fragment>\r\n        <Card className=\"recipe_hidden\">\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Button variant=\"primary\">View More</Button>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card className=\"recipe_hidden\">\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title></Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Button variant=\"primary\">View More</Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  } else if (c === 2) {\r\n    return (\r\n      <Card className=\"recipe_hidden\">\r\n        <Card.Img variant=\"top\" />\r\n        <Card.Body>\r\n          <Card.Title></Card.Title>\r\n          <Card.Text></Card.Text>\r\n          <Button variant=\"primary\">View More</Button>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  } else {\r\n    return <p></p>;\r\n  }\r\n}\r\n\r\nclass RecipeCard extends Component {\r\n  state = {\r\n    myArray: [],\r\n  };\r\n\r\n  async getData() {\r\n    let arrayaux2 = await axios\r\n      .get(\"https://recipes-backend-web.herokuapp.com/api/recipes/\")\r\n      .then(function (response) {\r\n        let auxArray = [[]];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let aux in response.data) {\r\n          if (j === 3) {\r\n            j = 0;\r\n            i++;\r\n            auxArray[i] = [];\r\n          }\r\n          auxArray[i].push(response.data[aux]);\r\n          j++;\r\n        }\r\n        return auxArray;\r\n      });\r\n\r\n    this.setState({ myArray: arrayaux2 });\r\n  }\r\n\r\n  async getDataCustom(value) {\r\n    let arrayaux2 = await axios\r\n      .get(\"https://recipes-backend-web.herokuapp.com/api/recipes/\")\r\n      .then(function (response) {\r\n        let auxArray = [[]];\r\n        let i = 0;\r\n        let j = 0;\r\n        for (let aux in response.data) {\r\n          if (j === 3) {\r\n            j = 0;\r\n            i++;\r\n            auxArray[i] = [];\r\n          }\r\n          if (response.data[aux].title.includes(value)) {\r\n            auxArray[i].push(response.data[aux]);\r\n            j++;\r\n          }\r\n        }\r\n        return auxArray;\r\n      });\r\n    this.setState({ myArray: arrayaux2 });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.value !== prevProps.value) {\r\n      this.getDataCustom(this.props.value);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    $(\".recipe\").hover(\r\n      function () {\r\n        $(this).animate(\r\n          {\r\n            marginTop: \"-=1%\",\r\n            marginBottom: \"1%\",\r\n          },\r\n          200\r\n        );\r\n      },\r\n\r\n      function () {\r\n        $(this).animate(\r\n          {\r\n            marginTop: \"0%\",\r\n            marginBottom: \"0%\",\r\n          },\r\n          200\r\n        );\r\n      }\r\n    );\r\n\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    let cont = 0;\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.myArray.map((value, index) => {\r\n          return (\r\n            <CardDeck className=\"deck\" key={index}>\r\n              {value.map((value, index) => {\r\n                let auxstr = value.steps.substr(0, 25);\r\n                if (value.steps.substr(25)) {\r\n                  auxstr += \"...\";\r\n                }\r\n                cont++;\r\n                let auxstr2 = \"/info/\" + value.id;\r\n                auxstr2 = auxstr2.replace(\" \", \"\");\r\n                return (\r\n                  <Card className=\"recipe\" key={index}>\r\n                    <Card.Img variant=\"top\" src={value.image} />\r\n                    <Card.Body>\r\n                      <Card.Title>{value.title}</Card.Title>\r\n                      <Card.Text>{auxstr}</Card.Text>\r\n                      <NavLink exact activeClassName=\"current\" to={auxstr2}>\r\n                        <Button variant=\"primary\">View More</Button>\r\n                      </NavLink>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              })}\r\n              {CheckCards(cont)}\r\n            </CardDeck>\r\n          );\r\n        })}\r\n\r\n        <div className=\"wrap\">\r\n          <Empty counter={cont} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RecipeCard;\r\n","import React, { Component } from \"react\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport SearchBar from \"../components/SearchBar/SearchBar\";\r\nimport RecipeCard from \"../components/RecipeCard/RecipeCard\";\r\nimport \"./Recipes.css\";\r\n\r\nclass Recipes extends Component {\r\n  state = {\r\n    value: \"\",\r\n  };\r\n\r\n  handleValue = (val) => {\r\n    this.setState({ value: val });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <SearchBar value={this.handleValue} />\r\n        <div className=\"recipe-card\">\r\n          <RecipeCard value={this.state.value} />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recipes;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport bsCustomFileInput from \"bs-custom-file-input\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./Form.css\";\r\n\r\nclass FormComponent extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    (function () {\r\n      bsCustomFileInput.init();\r\n    })();\r\n  }\r\n\r\n  render() {\r\n    const formData = new FormData();\r\n    let file;\r\n\r\n    const schema = Yup.object({\r\n      title: Yup.string().required(\"Write a title for your recipe\"),\r\n      category: Yup.string()\r\n        .oneOf(\r\n          [\"Appetizers\", \"Breakfast\", \"Lunch\", \"Dinner\", \"Dessert\", \"Beverage\"],\r\n          \"Select one category\"\r\n        )\r\n        .required(\"Select one category\"),\r\n      steps: Yup.string().required(\"Write some steps\"),\r\n      image: Yup.string().required(),\r\n    });\r\n\r\n    const customChange = (event) => {\r\n      file = event.target.files[0];\r\n    };\r\n\r\n    const handleSubmit = (item) => {\r\n      formData.append(\"title\", item.title);\r\n      formData.append(\"category\", item.category);\r\n      formData.append(\"steps\", item.steps);\r\n      formData.append(\"image\", file, item.image);\r\n\r\n      axios\r\n        .post(\r\n          \"https://recipes-backend-web.herokuapp.com/api/recipes/\",\r\n          formData\r\n        )\r\n        .then(() => {\r\n          Swal.fire({\r\n            title: \"Good job!\",\r\n            text: \"Your recipe has been submited\",\r\n            icon: \"success\",\r\n            onClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          Swal.fire({\r\n            title: \"Oops...\",\r\n            text: \"Something went wrong\",\r\n            icon: \"error\",\r\n            onClose: () => {\r\n              window.location.reload(false);\r\n            },\r\n          });\r\n        });\r\n    };\r\n\r\n    return (\r\n      <Card className=\"custom-card\">\r\n        <Card.Header>Create new recipe</Card.Header>\r\n        <Card.Body>\r\n          <Formik\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n            initialValues={{ title: \"\", category: \"\", steps: \"\", image: \"\" }}\r\n          >\r\n            {({ handleSubmit, handleChange, values, errors }) => (\r\n              <Form noValidate onSubmit={handleSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"form-grid-name\">\r\n                    <Form.Label className=\"label\">Name</Form.Label>\r\n                    <Form.Control\r\n                      name=\"title\"\r\n                      value={values.title}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.title}\r\n                      placeholder=\"Recipe's name\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.title}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Col} controlId=\"form-grid-category\">\r\n                    <Form.Label className=\"label\">Category</Form.Label>\r\n                    <Form.Control\r\n                      name=\"category\"\r\n                      value={values.category}\r\n                      onChange={handleChange}\r\n                      isInvalid={!!errors.category}\r\n                      as=\"select\"\r\n                    >\r\n                      <option>Select category</option>\r\n                      <option>Appetizers</option>\r\n                      <option>Breakfast</option>\r\n                      <option>Lunch</option>\r\n                      <option>Dinner</option>\r\n                      <option>Dessert</option>\r\n                      <option>Beverage</option>\r\n                    </Form.Control>\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                      {errors.category}\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"form-grid-steps\">\r\n                  <Form.Label className=\"label\">List the steps</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows=\"5\"\r\n                    name=\"steps\"\r\n                    value={values.steps}\r\n                    onChange={handleChange}\r\n                    isInvalid={!!errors.steps}\r\n                    placeholder=\"1.\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.steps}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"form-grid-image\">\r\n                  <Form.File\r\n                    id=\"image\"\r\n                    name=\"image\"\r\n                    value={values.image}\r\n                    onChange={(event) => {\r\n                      handleChange(event);\r\n                      customChange(event);\r\n                    }}\r\n                    isInvalid={!!errors.image}\r\n                    label=\"Upload your recipe's image\"\r\n                    accept=\".jpg,.png\"\r\n                    custom\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button\r\n                  variant=\"warning\"\r\n                  type=\"submit\"\r\n                  //onClick={this.handleSubmit}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormComponent;\r\n","import React from \"react\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\nimport FormComponent from \"../components/Form/Form\";\r\n\r\nconst Create = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <NavBarGroup />\r\n      <FormComponent />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./InfoComponent.css\";\r\n\r\nclass InfoComponent extends Component {\r\n  state = {\r\n    recipe: [],\r\n    steps_splitted: [],\r\n  };\r\n\r\n  async getData() {\r\n    let data = await axios\r\n      .get(\r\n        \"https://recipes-backend-web.herokuapp.com/api/recipes/\" +\r\n          this.props.recipe.params.id\r\n      )\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n\r\n    this.setState({ recipe: data });\r\n    var splitted = this.state.recipe.steps.split(\"\\n\");\r\n    this.setState({ steps_splitted: splitted });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <h1>{this.state.recipe.title}</h1>\r\n          <h3>{this.state.recipe.category}</h3>\r\n          {this.state.steps_splitted.map((value, index) => {\r\n            return <h5 key={index}>{value}</h5>;\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoComponent;\r\n","import React, { Component } from \"react\";\r\nimport InfoComponent from \"../components/InfoComponent/InfoComponent\";\r\nimport NavBarGroup from \"../components/NavBar/NavBarGroup\";\r\n\r\nclass Info extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBarGroup />\r\n        <InfoComponent recipe={this.props.match} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Recipes from \"./pages/Recipes\";\nimport Create from \"./pages/Create\";\nimport Info from \"./pages/Info\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/RecipesWeb/\" component={Home}></Route>\n        <Route exact path=\"/recipes\" component={Recipes}></Route>\n        <Route exact path=\"/create\" component={Create}></Route>\n        <Route exact path=\"/info/:id\" component={Info}></Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}